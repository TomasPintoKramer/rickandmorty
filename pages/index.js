import { Heading, Text, Box, Grid, GridItem , Select } from "@chakra-ui/react";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { useEffect, useState } from "react";
import Link from "next/link";

export default function Home({
  lastEpisode,
  performanceTime,
  dataEpisode,
  dataCharacter,
  dataLocation,
}) {
  const [time, setTime] = useState([]);
  const [episodes, setEpisodes] = useState([]);
  const [origins, setOriginss] = useState([]);
 
  useEffect(() => {
    for (let i = 1; i <= lastEpisode; i++) {
      setEpisodes((current) => [...current, i]);
    }
  }, []);

  const handlerEpisode = async (e) => {
    if (e.target.value) {
      const startTime =  new Date().getTime();
      const locations = [];
      const episodeJson = await fetch(
        `https://rickandmortyapi.com/api/episode/${e.target.value}`
      );
      const episode = await episodeJson.json();
      const charactersPromises = episode.characters.map((url) =>
        fetch(`${url}`)
      );
      const characterJson = await Promise.all(charactersPromises);
      const characterArr = characterJson.map((char) => char.json());
      const character = await Promise.all(characterArr);
      character.map((ch) => locations.push(ch.origin.name));
      const uniqueLocations = [...new Set(locations)];
      setOriginss(uniqueLocations);
      const endTime = await new Date().getTime();
      const totalTime = ( (endTime - startTime)) / 100;
      setTime(totalTime);
    }
  };
  return (
    <Box className={styles.container} color='white'
    backgroundRepeat='no-repeat'
    backgroundBlendMode='color'
    backgroundSize='auto'
    
     backgroundPosition='center'
     backgroundImage='https://images5.alphacoders.com/876/876590.png'>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Heading fontSize='6xl'className={styles.title}>
          Bienvenidos al <br />
          <Link  href="https://github.com/TomasPintoKramer/rickandmorty">
          <a target="_blank"
            style={{ color: "#97ce4c", fontWeight: "bold" }}
            >
            Rick and Morty Challenge!
          </a>
            </Link>
        </Heading>
       
        <Text py='0.5em' fontSize='xl'> Tardo <strong>{performanceTime}</strong> segundos en performar.</Text>
        <Box className={styles.grid}>
          <Box className={styles.card}>
            <Heading>Location</Heading>
            <Text>
              Cuántas veces aparece la letra "l" (case insensitive) en los
              nombres de todos los location?
            </Text>
            <Heading textAlign="center">{dataLocation.info.count}</Heading>
          </Box>

          <Box className={styles.card}>
            <Heading>Episode</Heading>
            <Text>
              Cuántas veces aparece la letra "e" (case insensitive) en los
              nombres de todos los episode?
            </Text>
            <Heading textAlign="center">{dataEpisode.info.count}</Heading>
          </Box>

          <Box className={styles.card}>
            <Heading>Character</Heading>
            <Text>
              Cuántas veces aparece la letra "c" (case insensitive) en los
              nombres de todos los character?
            </Text>
            <Heading textAlign="center">{dataCharacter.info.count}</Heading>
          </Box>

          <Box className={styles.card}>
            <Heading>Episode Location</Heading>
            <Text>
            Por cada episode, cantidad y listado de  origin de todos los character del episodio (sin repetir). 
            </Text>

            <Select onChange={handlerEpisode} placeholder="Elegí el espisodio">
              {episodes.map((episode, i) => (
                <option key={i}>{episode}</option>
              ))}
            </Select>
          </Box>
          {origins.length!== 0 &&
          <Box display='flex' flexDir='column' alignItems='center' >
          <Text pb='1em' textAlign='center' fontWeight='bold'>Cantidad de locations sin repetir: {origins.length}
          <br/>
           Tiempo de performance: {time} segundos </Text>
           <Grid templateColumns='repeat(5, 1fr)' gap={6} className={styles.grid}>
                {origins.map((location)=><GridItem w='100%'>{location}, </GridItem>)}
          </Grid>
          </Box>
          }
        </Box>
      </main>
    </Box>
  );
}

export async function getStaticProps() {
  try {
    const startTime =  new Date().getTime();
    const [reqList, reqEpisode, reqCharacter, reqLocation] = await Promise.all([
      fetch(`https://rickandmortyapi.com/api/episode`),
      fetch(`https://rickandmortyapi.com/api/episode/?name=i`),
      fetch(`https://rickandmortyapi.com/api/character/?name=c`),
      fetch(`https://rickandmortyapi.com/api/location/?name=l`),
    ]);
    const [dataList, dataEpisode, dataCharacter, dataLocation] =
      await Promise.all([
        reqList.json(),
        reqEpisode.json(),
        reqCharacter.json(),
        reqLocation.json(),
      ]);
    const endTime = await new Date().getTime();
    const totalTime = (await (endTime - startTime)) / 100;

    return {
      props: {
        lastEpisode: dataList.info.count,
        performanceTime: totalTime,
        dataEpisode: dataEpisode,
        dataCharacter: dataCharacter,
        dataLocation: dataLocation,
      },
    };
  } catch (err) {
    console.log(err);
  }
}
