import { Heading, Text, Box, FormLabel, Select } from "@chakra-ui/react";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import Link from "next/link";
import { useEffect, useState } from "react";

export default function Home({
  lastEpisode,
  performanceTime,
  dataInfo,
  dataEpisode,
  dataCharacter,
  dataLocation,
}) {
  const [time, setTime] = useState([]);
  const [episodes, setEpisodes] = useState([]);
  const [origins, setOriginss] = useState([]);
  const [answer, setAnswer] = useState({});
  useEffect(() => {
    const diffMs =
      new Date(dataInfo[1].air_date) - new Date(dataInfo[0].air_date); //mmseconds
    const diffDays = Math.floor(diffMs / 8640000); // days
    setAnswer({ ms: diffMs, days: diffDays });
    for (let i = 1; i <= lastEpisode; i++) {
      setEpisodes((current) => [...current, i]);
    }
  }, []);

  const handlerEpisode = async (e) => {
    if (e.target.value) {
      console.log(
        "🚀 ~ file: index.js ~ line 33 ~ handlerEpisode ~ e.target.value ",
        e.target.value
      );
      const startTime = await new Date().getTime();
      const locations = [];
      const episodeJson = await fetch(
        `https://rickandmortyapi.com/api/episode/${e.target.value}`
      );
      const episode = await episodeJson.json();
      const charactersPromises = episode.characters.map((url) =>
        fetch(`${url}`)
      );
      const characterJson = await Promise.all(charactersPromises);
      const characterArr = characterJson.map((char) => char.json());
      const character = await Promise.all(characterArr);
      character.map((ch) => locations.push(ch.origin.name));
      const uniqueLocations = [...new Set(locations)];
      setOriginss(uniqueLocations);
      const endTime = await new Date().getTime();
      const totalTime = (await (endTime - startTime)) / 100;
      setTime(totalTime);
    }
  };
  return (
    <Box className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Heading fontSize='6xl'className={styles.title}>
          Bienvenidos al <br />
          <a
            style={{ color: "#97ce4c", fontWeight: "bold" }}
            href="https://nextjs.org"
          >
            Rick and Morty Challenge!
          </a>
        </Heading>
        <Text pt="2em" fontWeight="bold" textAlign="center">
          Un programa que duró {answer.days} días al aire.
          <br /> Desde el primer hasta el último episodio.
        </Text>
        <Text py='0.5em'> Tardo <strong>{performanceTime}</strong> segundos en performar.</Text>
        <Box className={styles.grid}>
          <Box className={styles.card}>
            <Heading>Location</Heading>
            <Text>
              Cuántas veces aparece la letra "l" (case insensitive) en los
              nombres de todos los location?
            </Text>
            <Heading textAlign="center">{dataLocation.info.count}</Heading>
          </Box>

          <Box className={styles.card}>
            <Heading>Episode</Heading>
            <Text>
              Cuántas veces aparece la letra "e" (case insensitive) en los
              nombres de todos los episode?
            </Text>
            <Heading textAlign="center">{dataEpisode.info.count}</Heading>
          </Box>

          <Box className={styles.card}>
            <Heading>Character</Heading>
            <Text>
              Cuántas veces aparece la letra "c" (case insensitive) en los
              nombres de todos los character?
            </Text>
            <Heading textAlign="center">{dataCharacter.info.count}</Heading>
          </Box>

          <Box className={styles.card}>
            <Heading>Episode Location</Heading>
            <Text>
              Cuánto tardó el programa 👆 en total (desde inicio ejecución hasta
              entrega de resultados)
            </Text>

            <Select onChange={handlerEpisode} placeholder="Elegí el espisodio">
              {episodes.map((episode, i) => (
                <option key={i}>{episode}</option>
              ))}
            </Select>
          </Box>
        </Box>
      </main>
    </Box>
  );
}

export async function getServerSideProps() {
  try {
    const startTime = await new Date().getTime();
    const list = await fetch(`https://rickandmortyapi.com/api/episode`);
    const { info } = await list.json();
    const [reqInfo, reqEpisode, reqCharacter, reqLocation] = await Promise.all([
      fetch(`https://rickandmortyapi.com/api/episode/1,${info.count}`),
      fetch(`https://rickandmortyapi.com/api/episode/?name=i`),
      fetch(`https://rickandmortyapi.com/api/character/?name=c`),
      fetch(`https://rickandmortyapi.com/api/location/?name=l`),
    ]);
    const [dataInfo, dataEpisode, dataCharacter, dataLocation] =
      await Promise.all([
        reqInfo.json(),
        reqEpisode.json(),
        reqCharacter.json(),
        reqLocation.json(),
      ]);
    const endTime = await new Date().getTime();
    const totalTime = (await (endTime - startTime)) / 100;

    return {
      props: {
        lastEpisode: info.count,
        performanceTime: totalTime,
        dataInfo: dataInfo,
        dataEpisode: dataEpisode,
        dataCharacter: dataCharacter,
        dataLocation: dataLocation,
      },
    };
  } catch (err) {
    console.log(err);
  }
}
